// Debugging & Inicialización
console.log('Script initialization started');
window.addEventListener('error', function(e) {
  console.error('Global error caught:', e.message, 'at', e.filename, ':', e.lineno);
});

// Manejo del preloader
window.addEventListener('load', function() {
  const preloader = document.querySelector('.preloader');
  if (preloader) {
    setTimeout(() => {
      preloader.style.opacity = '0';
      setTimeout(() => {
        preloader.style.display = 'none';
      }, 500);
    }, 700);
  }
});

// Verificar que las dependencias se hayan cargado
function checkDependencies() {
  if (typeof AOS === 'undefined') {
    console.error('AOS library not loaded. Check your internet connection or script tags order.');
    return false;
  }
  return true;
}

// Funcionalidades principales del sitio
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM fully loaded');
  
  try {
    // Inicialización de AOS simplificada
    if (typeof AOS !== 'undefined') {
      AOS.init({
        duration: 800,
        easing: 'ease-out',
        once: false,
        offset: 100,
        delay: 50,
      });
      console.log('AOS initialized successfully');
    } else {
      console.warn('AOS library not available');
    }
  } catch (error) {
    console.error('Error initializing AOS:', error);
  }
  
  // Toggle menú móvil
  const menuBtn = document.getElementById('menuBtn');
  const navMenu = document.getElementById('navMenu');
  
  menuBtn.addEventListener('click', () => {
    navMenu.classList.toggle('active');
  });

  // Cerrar menú al hacer click en un enlace
  document.querySelectorAll('.nav-menu a').forEach(link => {
    link.addEventListener('click', () => {
      if (navMenu.classList.contains('active')) {
        navMenu.classList.remove('active');
      }
    });
  });

  // Añadir clase activa en navegación según la sección visible
  const sections = document.querySelectorAll('section[id]');
  
  function highlightNavOnScroll() {
    const scrollY = window.scrollY;
    
    sections.forEach(current => {
      const sectionHeight = current.offsetHeight;
      const sectionTop = current.offsetTop - 100;
      const sectionId = current.getAttribute('id');
      
      if (scrollY > sectionTop && scrollY <= sectionTop + sectionHeight) {
        document.querySelector('.nav-menu a[href*=' + sectionId + ']').classList.add('active');
      } else {
        document.querySelector('.nav-menu a[href*=' + sectionId + ']').classList.remove('active');
      }
    });
  }
  
  window.addEventListener('scroll', highlightNavOnScroll);

  // Form Validation & Submission
  const contactForm = document.getElementById('contactForm');
  
  if (contactForm) {
    const formFields = {
      name: {
        regex: /^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]{3,50}$/,
        errorMessage: 'Por favor ingrese un nombre válido (mínimo 3 caracteres).'
      },
      company: {
        regex: /^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑ\s.,&-]{2,50}$/,
        errorMessage: 'Por favor ingrese un nombre de empresa válido.'
      },
      email: {
        regex: /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/,
        errorMessage: 'Por favor ingrese un correo electrónico válido.'
      },
      phone: {
        regex: /^[0-9()+\-\s]{0,20}$/,
        errorMessage: 'Por favor ingrese un número telefónico válido.',
        optional: true
      },
      message: {
        regex: /^.{10,500}$/,
        errorMessage: 'Por favor ingrese un mensaje entre 10 y 500 caracteres.'
      },
      privacy: {
        errorMessage: 'Debe aceptar la política de privacidad.'
      }
    };

    // Validate on input
    Object.keys(formFields).forEach(field => {
      const input = contactForm[field];
      if (!input) return;
      
      input.addEventListener('input', () => {
        validateField(field, input);
      });

      // Para checkbox
      if (input.type === 'checkbox') {
        input.addEventListener('change', () => {
          validateField(field, input);
        });
      }
    });

    // Validate field
    function validateField(fieldName, input) {
      const fieldConfig = formFields[fieldName];
      const parentGroup = input.closest('.form-group');
      const errorText = parentGroup.querySelector('.error-text');
      
      let valid = true;
      
      // Para checkbox
      if (input.type === 'checkbox') {
        valid = input.checked;
      } 
      // Para campos regulares
      else if (!fieldConfig.optional || input.value.trim() !== '') {
        valid = fieldConfig.regex ? fieldConfig.regex.test(input.value) : true;
      }

      if (valid) {
        parentGroup.classList.remove('error');
        if (errorText) errorText.innerHTML = '';
        return true;
      } else {
        parentGroup.classList.add('error');
        if (errorText) errorText.innerHTML = fieldConfig.errorMessage;
        return false;
      }
    }

    // Form submission
    contactForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Reset messages
      document.querySelector('.success-message').style.display = 'none';
      document.querySelector('.error-message').style.display = 'none';
      
      // Validate all fields
      let isValid = true;
      
      Object.keys(formFields).forEach(field => {
        const input = contactForm[field];
        if (!input) return;
        
        if (!validateField(field, input)) {
          isValid = false;
        }
      });
      
      if (!isValid) {
        return; // Stop if validation failed
      }
      
      // Show loading
      const submitBtn = contactForm.querySelector('.btn-submit');
      submitBtn.classList.add('loading');
      
      // Collect form data
      const formData = new FormData(contactForm);
      const formDataObject = {};
      
      formData.forEach((value, key) => {
        formDataObject[key] = value;
      });
      
      // Simulate AJAX call (in a real scenario, this would be an actual API call)
      setTimeout(() => {
        submitBtn.classList.remove('loading');
        
        // Show success message
        document.querySelector('.success-message').style.display = 'flex';
        
        // Reset form
        contactForm.reset();
        
        // Faux request - would be replaced with actual API call
        console.log('Form data to submit:', formDataObject);
      }, 1500);
    });
  }

  // Animated counters for statistics
  const stats = document.querySelectorAll('.stat');
  let counterObserver;
  
  if ('IntersectionObserver' in window) {
    counterObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const stat = entry.target;
          const statBar = stat.querySelector('.stat-fill');
          
          if (statBar) {
            const width = statBar.style.width;
            statBar.style.width = '0%';
            
            setTimeout(() => {
              statBar.style.transition = 'width 1.5s ease-in-out';
              statBar.style.width = width;
            }, 100);
          }
          
          observer.unobserve(stat);
        }
      });
    }, {threshold: 0.5});
    
    stats.forEach(stat => counterObserver.observe(stat));
  }

  // Testimonials Slider
  const testimonialSlider = document.getElementById('testimonialSlider');
  
  if (testimonialSlider) {
    const testimonials = testimonialSlider.querySelectorAll('.testimonial');
    const dots = testimonialSlider.querySelectorAll('.dot');
    let currentIndex = 0;
    let intervalId;
    
    function showTestimonial(index) {
      testimonials.forEach((testimonial, i) => {
        testimonial.classList.remove('active');
        dots[i].classList.remove('active');
      });
      
      testimonials[index].classList.add('active');
      dots[index].classList.add('active');
      currentIndex = index;
    }
    
    // Initialize dot click events
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        showTestimonial(index);
        resetInterval();
      });
    });
    
    // Auto rotation function
    function nextTestimonial() {
      let newIndex = currentIndex + 1;
      if (newIndex >= testimonials.length) {
        newIndex = 0;
      }
      showTestimonial(newIndex);
    }
    
    // Reset interval when user interacts
    function resetInterval() {
      clearInterval(intervalId);
      intervalId = setInterval(nextTestimonial, 5000);
    }
    
    // Start auto rotation
    intervalId = setInterval(nextTestimonial, 5000);
    
    // Pause rotation when hovering
    testimonialSlider.addEventListener('mouseenter', () => {
      clearInterval(intervalId);
    });
    
    // Resume rotation when leaving
    testimonialSlider.addEventListener('mouseleave', () => {
      intervalId = setInterval(nextTestimonial, 5000);
    });
    
    // Swipe support for mobile
    let touchStartX = 0;
    let touchEndX = 0;
    
    testimonialSlider.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    }, false);
    
    testimonialSlider.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    }, false);
    
    function handleSwipe() {
      if (touchEndX < touchStartX - 50) {
        // Swipe left, next testimonial
        let newIndex = currentIndex + 1;
        if (newIndex >= testimonials.length) {
          newIndex = 0;
        }
        showTestimonial(newIndex);
        resetInterval();
      }
      
      if (touchEndX > touchStartX + 50) {
        // Swipe right, previous testimonial
        let newIndex = currentIndex - 1;
        if (newIndex < 0) {
          newIndex = testimonials.length - 1;
        }
        showTestimonial(newIndex);
        resetInterval();
      }
    }
  }
  
  // Dark Mode Toggle
  const toggleSwitch = document.querySelector('.theme-switch input[type="checkbox"]');
  
  // Function to set theme preference in localStorage
  function setThemePreference(theme) {
    localStorage.setItem('theme', theme);
  }
  
  // Function to toggle between light and dark themes
  function switchTheme(e) {
    if (e.target.checked) {
      document.documentElement.setAttribute('data-theme', 'dark');
      setThemePreference('dark');
    } else {
      document.documentElement.removeAttribute('data-theme');
      setThemePreference('light');
    }
  }
  
  // Event listener for theme switch
  if (toggleSwitch) {
    toggleSwitch.addEventListener('change', switchTheme);
    
    // Check for saved theme preference
    const currentTheme = localStorage.getItem('theme');
    if (currentTheme) {
      if (currentTheme === 'dark') {
        toggleSwitch.checked = true;
        document.documentElement.setAttribute('data-theme', 'dark');
      } else {
        toggleSwitch.checked = false;
        document.documentElement.removeAttribute('data-theme');
      }
    } else {
      // Check if user prefers dark mode
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        toggleSwitch.checked = true;
        document.documentElement.setAttribute('data-theme', 'dark');
        setThemePreference('dark');
      }
    }
  }
  
  // FAQ Accordion
  const faqItems = document.querySelectorAll('.faq-item');
  
  if (faqItems.length > 0) {
    faqItems.forEach(item => {
      const question = item.querySelector('.faq-question');
      
      question.addEventListener('click', () => {
        // Close all other items
        const currentlyActive = document.querySelector('.faq-item.active');
        if (currentlyActive && currentlyActive !== item) {
          currentlyActive.classList.remove('active');
        }
        
        // Toggle current item
        item.classList.toggle('active');
      });
    });
    
    // Open the first FAQ item by default
    faqItems[0].classList.add('active');
  }
  
  // Language Switcher
  const langButtons = document.querySelectorAll('.lang-btn');
  
  if (langButtons.length > 0) {
    // Check if the user has a language preference stored
    const savedLang = localStorage.getItem('language') || 'es';
    
    // Set active class based on saved preference or default to Spanish
    langButtons.forEach(btn => {
      if (btn.getAttribute('data-lang') === savedLang) {
        btn.classList.add('active');
      } else {
        btn.classList.remove('active');
      }
    });
    
    // Set click event for language buttons
    langButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const lang = btn.getAttribute('data-lang');
        
        // Save preference
        localStorage.setItem('language', lang);
        
        // Update UI
        langButtons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        // In a full implementation, this would load translated content
        console.log(`Language changed to: ${lang}`);
        
        // Simulate language change notification
        const currentLang = lang === 'es' ? 'Español' : 'English';
        
        // Create and show notification
        const notification = document.createElement('div');
        notification.className = 'lang-notification';
        notification.innerHTML = `<i class="fas fa-language"></i> ${currentLang}`;
        document.body.appendChild(notification);
        
        // Animate in
        setTimeout(() => {
          notification.classList.add('show');
        }, 10);
        
        // Remove after delay
        setTimeout(() => {
          notification.classList.remove('show');
          setTimeout(() => {
            notification.remove();
          }, 300);
        }, 2000);
      });
    });
  }

  // Stats Counter Animation
  const statCounters = document.querySelectorAll('.stat-counter');
  
  function animateCounter(counter, target, duration) {
    let startTimestamp = null;
    const startValue = 0;
    const isDecimal = target.toString().includes('.');
    const decimalPlaces = isDecimal ? target.toString().split('.')[1].length : 0;
    
    function step(timestamp) {
      if (!startTimestamp) startTimestamp = timestamp;
      const progress = Math.min((timestamp - startTimestamp) / duration, 1);
      const currentValue = progress * (target - startValue) + startValue;
      
      counter.textContent = isDecimal 
        ? currentValue.toFixed(decimalPlaces) 
        : Math.floor(currentValue).toLocaleString();
      
      if (progress < 1) {
        window.requestAnimationFrame(step);
      }
    }
    
    window.requestAnimationFrame(step);
  }
  
  // Use Intersection Observer for the counters
  if ('IntersectionObserver' in window && statCounters.length > 0) {
    const counterObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const counter = entry.target;
          const target = parseFloat(counter.getAttribute('data-target'));
          
          // Different duration based on target value size
          let duration = 2000;
          if (target > 1000) duration = 2500;
          if (target > 10000) duration = 3000;
          
          animateCounter(counter, target, duration);
          observer.unobserve(counter);
        }
      });
    }, {threshold: 0.5});
    
    statCounters.forEach(counter => {
      counterObserver.observe(counter);
    });
  }
});

// Agregar estilo de enlace activo en navegación
document.addEventListener('DOMContentLoaded', function() {
  // Añadir clase activa al estilo para el enlace activo
  const styleSheet = document.styleSheets[0];
  const cssRules = `.nav-menu a.active { color: var(--primary); }
                    .nav-menu a.active::after { width: 100%; }`;
  
  if (styleSheet.insertRule) {
    styleSheet.insertRule(cssRules, styleSheet.cssRules.length);
  } else if (styleSheet.addRule) {
    styleSheet.addRule(cssRules, -1);
  }

  // Verificar que las imágenes cargan correctamente
  const aboutImage = document.querySelector('.about-image img');
  if (aboutImage) {
    aboutImage.addEventListener('error', function() {
      // Si la imagen no carga, intentar con un placeholder elegante
      this.src = 'https://via.placeholder.com/800x600/003366/FFFFFF?text=MVM+Consultores';
      this.alt = 'MVM Consultores';
      // Agregar clases para un mejor estilo
      this.classList.add('placeholder-image');
    });

    // Efectos de parallax para la imagen
    document.addEventListener('mousemove', function(e) {
      if (window.innerWidth > 768) { // Solo en pantallas grandes
        const mouseX = e.clientX / window.innerWidth - 0.5;
        const mouseY = e.clientY / window.innerHeight - 0.5;
        
        aboutImage.style.transform = `perspective(1000px) rotateY(${mouseX * 5}deg) rotateX(${-mouseY * 5}deg) scale(1.05)`;
        aboutImage.style.transition = 'transform 0.1s ease-out';
      }
    });

    // Restablecer cuando el ratón sale del área
    document.querySelector('.about-section').addEventListener('mouseleave', function() {
      aboutImage.style.transform = 'perspective(1000px) rotateY(0) rotateX(0) scale(1)';
      aboutImage.style.transition = 'transform 0.5s ease-out';
    });
  }
  
  // Efecto de números animados en estadísticas
  const stats = document.querySelectorAll('.stat p');
  let animated = false;
  
  function animateStats() {
    if (animated) return;
    
    stats.forEach(stat => {
      const value = stat.innerText;
      const numericValue = parseFloat(value.replace(/[^0-9.-]+/g, ''));
      let startValue = 0;
      
      // Determinar si es un valor con signo
      const prefix = value.includes('+') ? '+' : '';
      const suffix = value.includes('MXN') ? ' mil millones MXN' : 
                    value.includes('MDD') ? ' MDD' : 
                    value.includes('%') ? '%' : '';
      
      const duration = 1500;
      const counter = setInterval(() => {
        startValue += numericValue / (duration / 30);
        if (startValue > numericValue) {
          startValue = numericValue;
          clearInterval(counter);
        }
        stat.innerText = prefix + startValue.toFixed(value.includes('.') ? 2 : 0) + suffix;
      }, 30);
    });
    
    animated = true;
  }
  
  // Observer para activar la animación cuando las stats estén visibles
  const statsSection = document.querySelector('.insights-section');
  if (statsSection) {
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Animar los contadores numéricos
          setTimeout(animateStats, 500);
          
          // Animar las barras de progreso
          document.querySelectorAll('.stat-fill').forEach(bar => {
            setTimeout(() => {
              bar.style.width = bar.getAttribute('style').split('width: ')[1];
            }, 300);
          });
        }
      });
    }, { threshold: 0.3 });
    
    observer.observe(statsSection);
  }
  
  // Efecto 3D en las tarjetas interactivas
  const cards = document.querySelectorAll('.interactive-card');
  
  cards.forEach(card => {
    card.addEventListener('mousemove', e => {
      if (window.innerWidth < 768) return; // Solo en pantallas grandes
      
      const cardRect = card.getBoundingClientRect();
      const cardX = e.clientX - cardRect.left;
      const cardY = e.clientY - cardRect.top;
      
      // Calcular la posición relativa del ratón dentro de la tarjeta
      const xRotation = ((cardY - cardRect.height / 2) / cardRect.height) * 10;
      const yRotation = ((cardRect.width / 2 - cardX) / cardRect.width) * 10;
      
      // Aplicar transformación 3D
      card.style.transform = `perspective(1000px) rotateX(${xRotation}deg) rotateY(${yRotation}deg) scale(1.03)`;
      
      // Efecto de brillo basado en la posición del ratón
      const glareX = ((cardX / cardRect.width) * 100).toFixed(2);
      const glareY = ((cardY / cardRect.height) * 100).toFixed(2);
      
      card.style.background = `radial-gradient(circle at ${glareX}% ${glareY}%, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 60%), var(--light)`;
    });
    
    // Restaurar al estado normal al salir
    card.addEventListener('mouseleave', () => {
      card.style.transform = '';
      card.style.background = '';
    });
    
    // Efecto de click
    card.addEventListener('click', () => {
      // Añadir animación de ondas al hacer click
      const ripple = document.createElement('span');
      ripple.classList.add('card-ripple');
      card.appendChild(ripple);
      
      setTimeout(() => {
        ripple.remove();
      }, 800);
    });
  });
});

// Efecto parallax avanzado para la hero section
document.addEventListener('DOMContentLoaded', function() {
  // Parallax para Hero Section
  const heroSection = document.querySelector('.hero-section');
  
  if (heroSection && window.innerWidth > 768) {
    window.addEventListener('scroll', function() {
      const scrollPosition = window.pageYOffset;
      const speed = 0.5;
      
      // Efecto de parallax en el scroll
      heroSection.style.backgroundPositionY = `${20 + scrollPosition * speed}%`;
      
      // Efecto de desvanecimiento de la hero section al hacer scroll
      if (scrollPosition < heroSection.offsetHeight) {
        const opacity = 1 - (scrollPosition / heroSection.offsetHeight * 1.5);
        heroSection.querySelector('.hero-content').style.opacity = Math.max(opacity, 0);
        heroSection.querySelector('.hero-content').style.transform = `translateY(${scrollPosition * 0.2}px)`;
      }
    });
  }
});

// Control del carrusel de testimonios
document.addEventListener('DOMContentLoaded', function() {
  // Testimonials slider
  const dots = document.querySelectorAll('.dot');
  const testimonials = document.querySelectorAll('.testimonial');
  let currentTestimonial = 0;
  let testimonialInterval;
  
  // Función para mostrar un testimonio específico
  function showTestimonial(index) {
    testimonials.forEach(testimonial => {
      testimonial.classList.remove('active');
    });
    
    dots.forEach(dot => {
      dot.classList.remove('active');
    });
    
    testimonials[index].classList.add('active');
    dots[index].classList.add('active');
    currentTestimonial = index;
  }
  
  // Inicializar el carrusel automático
  function startTestimonialInterval() {
    testimonialInterval = setInterval(() => {
      const nextIndex = (currentTestimonial + 1) % testimonials.length;
      showTestimonial(nextIndex);
    }, 5000);
  }
  
  // Parar el carrusel automático
  function stopTestimonialInterval() {
    clearInterval(testimonialInterval);
  }
  
  // Añadir eventos de clic a los puntos
  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      showTestimonial(index);
      stopTestimonialInterval();
      startTestimonialInterval();
    });
  });
  
  // Iniciar el carrusel automático
  startTestimonialInterval();
  
  // Detener el carrusel cuando el ratón está sobre los testimonios
  const testimonialContainer = document.querySelector('.testimonials-container');
  if (testimonialContainer) {
    testimonialContainer.addEventListener('mouseenter', stopTestimonialInterval);
    testimonialContainer.addEventListener('mouseleave', startTestimonialInterval);
  }
});

// Función para botón "volver arriba"
document.addEventListener('DOMContentLoaded', function() {
  // Botón volver arriba
  const backToTop = document.getElementById('back-to-top');
  
  window.addEventListener('scroll', function() {
    if (window.pageYOffset > 300) {
      backToTop.classList.add('visible');
    } else {
      backToTop.classList.remove('visible');
    }
  });
  
  backToTop.addEventListener('click', function(e) {
    e.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  });
});

// Navegación suave entre secciones
document.addEventListener('DOMContentLoaded', function() {
  // Scroll suave para todos los links internos
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
      if (this.getAttribute('href') === '#') return;
      
      e.preventDefault();
      
      const targetId = this.getAttribute('href');
      const targetElement = document.querySelector(targetId);
      
      if (targetElement) {
        const headerHeight = document.querySelector('.site-header').offsetHeight;
        const targetPosition = targetElement.offsetTop - headerHeight;
        
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
        
        // Actualizar URL sin recargar la página
        history.pushState(null, null, targetId);
      }
    });
  });
});

// Cursor personalizado - Se muestra en dispositivos de escritorio
// Este bloque maneja el cursor personalizado que sigue al mouse
document.addEventListener('DOMContentLoaded', function() {
  // Solo en dispositivos de escritorio
  if (window.innerWidth > 768) {
    const cursorDot = document.querySelector(".cursor-dot");
    const cursorOutline = document.querySelector(".cursor-dot-outline");
    
    // Verificar si los elementos del cursor existen
    if (!cursorDot || !cursorOutline) {
      console.warn('Custom cursor elements not found in the DOM');
      return;
    }
    
    // Mostrar cursor al mover el ratón
    window.addEventListener('mousemove', function(e) {
      if (!cursorDot || !cursorOutline) return;
      
      if (cursorDot.style.opacity !== "1") {
        cursorDot.style.opacity = "1";
      }
      if (cursorOutline.style.opacity !== "1") {
        cursorOutline.style.opacity = "1";
      }
      
      // Seguir al cursor con algo de retraso para el contorno
      cursorDot.style.transform = `translate(calc(${e.clientX}px - 50%), calc(${e.clientY}px - 50%))`;
      
      // Con un ligero retraso para el efecto visual
      setTimeout(() => {
        cursorOutline.style.transform = `translate(calc(${e.clientX}px - 50%), calc(${e.clientY}px - 50%))`;
      }, 80);
    });
    
    // Efecto al hacer hover sobre elementos clickables
    const clickables = document.querySelectorAll('a, button, .interactive-card, .card-cta, .team-member, .testimonial-dots .dot');
    
    clickables.forEach(el => {
      el.addEventListener('mouseover', (event) => {
        if (!cursorDot || !cursorOutline) return;
        cursorDot.style.transform = `translate(calc(${event.clientX}px - 50%), calc(${event.clientY}px - 50%)) scale(1.5)`;
        cursorOutline.style.transform = `translate(calc(${event.clientX}px - 50%), calc(${event.clientY}px - 50%)) scale(1.5)`;
        cursorOutline.style.backgroundColor = "rgba(255, 194, 14, 0.3)";
        cursorOutline.style.transition = "all 0.2s ease-out";
      });
      
      el.addEventListener('mouseout', (event) => {
        if (!cursorDot || !cursorOutline) return;
        cursorDot.style.transform = `translate(calc(${event.clientX}px - 50%), calc(${event.clientY}px - 50%)) scale(1)`;
        cursorOutline.style.transform = `translate(calc(${event.clientX}px - 50%), calc(${event.clientY}px - 50%)) scale(1)`;
        cursorOutline.style.backgroundColor = "rgba(255, 194, 14, 0.15)";
        cursorOutline.style.transition = "all 0.2s ease-out";
      });
    });
    
    // Ocultar cursor al salir de la ventana
    document.addEventListener("mouseout", function(e) {
      if (e.relatedTarget === null) {
        cursorDot.style.opacity = "0";
        cursorOutline.style.opacity = "0";
      }
    });
  }
});
